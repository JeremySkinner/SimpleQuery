#region License

// Copyright (c) Jeremy Skinner (http://www.jeremyskinner.co.uk)
// 
// Licensed under the Apache License, Version 2.0 (the "License"); 
// you may not use this file except in compliance with the License. 
// You may obtain a copy of the License at 
// 
// http://www.apache.org/licenses/LICENSE-2.0 
// 
// Unless required by applicable law or agreed to in writing, software 
// distributed under the License is distributed on an "AS IS" BASIS, 
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
// See the License for the specific language governing permissions and 
// limitations under the License.
// 
// The latest version of this file can be found at https://github.com/JeremySkinner/SimpleQuery

#endregion

using System;
using System.Linq.Expressions;
using System.Reflection;

namespace SimpleQuery {
	public class PropertyMetadata<T> {
		private readonly Action<T, object> setter;
		private readonly PropertyInfo property;
		private readonly Func<T, object> getter;

		public PropertyMetadata(PropertyInfo property) {
			this.property = property;
			this.setter = BuildSetterDelegate(property);
			this.getter = BuildGetterDelegate(property);
			PropertyName = MapPropertyName(property);

			var keyAttr = (KeyAttribute) Attribute.GetCustomAttribute(property, typeof (KeyAttribute));

			IsId =
				keyAttr != null ||
				property.Name == "Id" || property.Name == "ID";

			IsAutoGenerated = IsId;

			if (keyAttr != null && keyAttr.Generated == false) {
				IsAutoGenerated = false;
			}
		}

		private static string MapPropertyName(PropertyInfo property) {
			var attribute = (ColumnAttribute) Attribute.GetCustomAttribute(property, typeof (ColumnAttribute));
			if (attribute == null) return property.Name;
			return attribute.Name;
		}

		public bool IsId { get; private set; }

		public PropertyInfo Property {
			get { return property; }
		}

		public string PropertyName { get; protected set; }

		public bool IsAutoGenerated { get; internal set; }

		public void SetValue(T instance, object value) {
			if (value == DBNull.Value) {
				value = null; //TODO: Handle this more robustly
			}
			setter(instance, value);
		}

		public object GetValue(T instance) {
			return getter(instance);
		}

		private static Action<T, object> BuildSetterDelegate(PropertyInfo prop) {
			var instance = Expression.Parameter(typeof (T), "x");
			var argument = Expression.Parameter(typeof (object), "v");

			var setterCall = Expression.Call(
				instance,
				prop.GetSetMethod(true),
				Expression.Convert(argument, prop.PropertyType));

			return (Action<T, object>) Expression.Lambda(setterCall, instance, argument).Compile();
		}

		private Func<T, object> BuildGetterDelegate(PropertyInfo prop) {
			var param = Expression.Parameter(typeof (T), "x");
			Expression expression = Expression.PropertyOrField(param, prop.Name);

			if (prop.PropertyType.IsValueType)
				expression = Expression.Convert(expression, typeof (object));

			return Expression.Lambda<Func<T, object>>(expression, param)
				.Compile();
		}
	}
}